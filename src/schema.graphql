# import Post, Activity, ActivityType, ActivityTask, ActivityConnection, ActivityTaskConnection, ProcessStatus, Recipe, Tag from "./generated/prisma.graphql"
# import * from "./input.graphql"
# import * from "./model.graphql"
# import * from "./payload.graphql"

# graphql-upload
# this is needed for upload to work
scalar Upload

type Query {
  # user
  me: User! @cacheControl(maxAge: 3600, scope: PRIVATE)
  # tag
  tags(category: TagCategory): [Tag!]!
  myRecipeTags: [Tag!]!
  tag(id: ID!): Tag
  # activity
  activities: [Activity!]! @cacheControl(maxAge: 60)
  activitiesConnection(pagination: ForwardPaginationInput): ActivityConnection! @cacheControl(maxAge: 60)
  activity(id: ID!): Activity
  # task
  tasks: [ActivityTask!]! @cacheControl(maxAge: 60)
  tasksConnection(pagination: ForwardPaginationInput): ActivityTaskConnection @cacheControl(maxAge: 60)
  task(id: ID!): ActivityTask
  # recipe
  recipes: [Recipe!]!
  recipesConnection(pagination: ForwardPaginationInput): RecipeConnection!
  recipe(id: ID!): Recipe
}

type Mutation {
  # auth
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  # user
  updateUser(user: UpdateUserInput!): User!
  uploadAvatar(file: Upload!): User!
  # tag
  createTag(tag: CreateTagInput!): Tag!
  updateTag(tag: UpdateTagInput!): Tag!
  deleteTag(id: ID!): Tag!
  # activity
  createActivity(activity: CreateActivityInput!, tasksMeta: TasksMetaInput): Activity!
  updateActivity(activity: UpdateActivityInput!, tasksMeta: TasksMetaInput): Activity!
  deleteActivity(id: ID!): Activity!
  attendActivity(id: ID!): Activity!
  quitActivity(id: ID!): Activity!
  # task
  createTask(id: ID!, task: CreateTaskInput!): ActivityTask!
  updateTask(id: ID!, task: UpdateTaskInput!): ActivityTask!
  updateTaskStatus(id: ID!, taskId: ID!, status: ProcessStatus!): ActivityTask!
  deleteTask(id: ID!, taskId: ID!): ActivityTask!
  assignTask(id: ID!, taskId: ID!, assigneeId: ID): ActivityTask!
  # recipe
  createRecipe(recipe: CreateRecipeInput!, tagsMeta: TagsMetaInput): Recipe!,
  updateRecipe(recipe: UpdateRecipeInput!, tagsMeta: TagsMetaInput): Recipe!,
  deleteRecipe(id: ID!): Recipe!
  uploadRecipePicture(id: ID!, file: Upload!): Recipe!
  # upload
  singleUpload (file: Upload!): File!
  multipleUpload (files: [Upload!]!): [File!]!
}

type Subscription {
  # task
  updatedTask: ActivityTaskSubscriptionPayload
}